20220915 3조 세미프로젝트 : 성적처리시스템구현  
강사님 : 김호진
후기 및 총평


김태민 : 

두달 반이라는 시간을 프로그래밍에 대해 진지하게 학습하면서, 최근에 많이 느끼는 것은 프로그래밍은 수학과 비슷한 느낌을 준다는 것 이었습니다. 

사고방식이 수리력을 많이 필요한다는 것 보다는 문제를 해결하는 과정이 수학과 참 많이 닮아있다는 생각이 많이 들었습니다.

저는 지식을 암기하는 것에 대체로 자신이 있는 편이었고, 수업시간에 배우는 내용들을 열심히 학습했다고 느꼈지만, 이번에도 마찬가지로 공식은 열심히 외웠는데 

막상 실전에서는 응용력이 부족하다는 것을 뼈저리게 느꼈습니다.

분명히 정규화 과정을 선생님이 강조하셔 설명해주신 내용을 구어체로 다시 정리하여 보고 또 봐서 이해했다고 생각했지만, 막상 실제로 요구분석서
 
안에서 필요한 자료를 데이터화 하여 테이블로 구조화하려 하니 눈앞이 깜깜했습니다. 

분명히 배운 내용이고, 분명히 암기한 공식인데 문제로 마주치니 적용시켜야 하는 것이 무엇이고 사고를 어떻게 유연하게 할 수 있는지 떠오르지 않았습니다.

그렇게 또 다시 벽앞에 부딪히게 되니, 자신감도 잃게 되고 흥미도 점점 줄어드는 제 자신을 발견하게 됐는데, 다행히 어떻게든 열심히 해보려는 

팀원들과 좌절의 순간에 내미는 손을 따뜻하게 잡아주는 다른 조의 동료들, 그리고 선생님의 조언까지 더해져서 느리지만 한발한발 기본부터 문제들을 하나씩 

해결 해 나갈수 있었습니다.

ERD설계부터 크게 난항을 겪었는데, 처음에 설계할 당시에는 정규화도 엉망이었고 모든게 잘못 돼 있었지만, 계속 고민에 고민을 거듭해 느렸지만 컨펌을 받을 수 있었고, 

컨펌을 받는 과정에서 해주시는 선생님의 조언은 다시 한번 더 깊게 기초부터 생각할 수 있게 도움이 많이 되었습니다.

특히, 배점 테이블을 저희가 따로 빼놨을때 1대1 관계에 대해서도 더 깊고 자세히 설명 해주셨을때는 훨씬 더 많이 와닿았고 아마 평생 1대1관계를 

지양해야 한다는 결론은 잊지 못할거 같습니다.

ERD설계가 끝나고 쿼리문을 작성하는 것도 사실 쉽지는 않았습니다.

누군가에겐 쿼리문의 작성이 매우 쉬운일 일지 모르겠지만 막상 테이블을 생성하고 데이터를 관리하기 작성해야 하는 

프로시저,트리거, 뷰 등은 배운 것들을 응용하고 활용해야 문제 해결이 됐습니다. 

프로시저 내에서 잡아줘야 하는 예외처리를 하기 위해서는 수업시간에 배웠던 변수에 값 담아내기, 커서 오픈시켜서 와!!! 하고 쏟아지는 데이터들을 

다뤄서 다중행 처리가 가능하게 만들기 등 이론으로만 있던 지식들을 하나하나 활용해나가며 책속에서 배우는 지식 이상의 경험을 하게 됐습니다.

모르는 것은 서로 물어가다 보면 제가 보지 못한 것들을 팀원들이 찾아내주기도 하며 동료들의 다른 접근방식과 다른 풀이방식을 배워가며 

해결해냈을때의 그 쾌감은 잊을 수 없을것 같습니다.

프로젝트의 막바지인 지금도 여전히 다시 찾아보면 해결하지 못한 부분도 발견하여 아쉬움도 남는 것이 사실이지만, 무에서 유를 창조해내는 

그 과정이 쉽지 않았기에, 有라는 것은 어쩌면 友와 상호작용을 하며 도출해내는 소중한 시간과 경험이라는 것을 깨닫게 됐습니다.



김보경 : 

팀프로젝트를 시작할때 요구분석서를 받고 읽어보며 우리가 구현해야하는 부분에 대해 생각을 해보았다.
설계를 할때 가장 기초가 되는 단계인 데이터 분석을 해보며 어떠한 쿼리문을 작성하여 구현을 해야할지 큰 고민이 들었다.
우선 큰 틀을 잡아보며 요구분석서 안에 들어있는 내용중에 무엇을 개체로 나누어서 사용자에게 어떠한
기능을 구현할지 그 데이터들에 관한 기능 분석부터 시작했다.
먼저 개체는 관리자, 교수자와 학생, 과정과 과목, 성적, 배점, 강의실, 수강신청 , 중도탈락, 교재로 나누어 이것을 테이블로 변환하였다. 
변환한 테이블에 따라 어떠한 속성을 추가할지 생각했다.
하지만 너무 많은 테이블을 나누는 것도 복잡하고, 그렇다고해서 테이블안에 너무 많은 속성을 넣는것도 
안되기에 기능을 실현할 수 있는 것만 남기는 것도 어려웠다. 
고정으로 지정해서 사용하는 속성이 아니라고 생각한 개체를 따로 테이블로 빼서 사용하는게 낫다고 생각했다.
그래서 '배점' 테이블을 따로 만들어서 뺐지만 나중에 선생님의 컨펌을 통해 과목안에 들어가는 것이 맞다는 이야기를 듣고 해결했다.

또한, 하나의 과정이 열리면 그 과정에 여러개의 과목이 개설될 수 있다는 요구 분석서 내용을 보면 과정이 부모가 되어
그 키값으로 과목이 따라오게 된다고 생각했는데 과목은 이미 개설이 되어있고 과정에 배정이 되는 건지 
아니면 과정이 열리면서 과목이 개설되는 건지 고민이 된다는 다른 조원의 생각에 조원이 다같이 고민을 하는 
시간을 가졌고 선생님께 질문을 하며 처음 생각했던게 맞았다는 답변을 받고 해결했다.

역할 분담을 하며 교수자계정 테이블생성과 프로시저생성을 맡게되고 요구분석서를 분석하며 입력해야 하는 정보로 
교수자 이름,교수자 ID, 비밀번호, 등록날짜를 테이블에 담고 주민등록번호 뒷자리를 기본으로 교수자가 로그인 시 패스워드로 사용되도록 
INSERT쿼리문을 작성했다. 
관리자가 입력된 교수자 정보에 대하여 수정, 삭제할 수 있도록 UPDATE, DELETE쿼리문도 작성했다.
VIEW(뷰)에 출력 정보로 교수자 명, 배정된 과목명, 과목 기간(시작 연월일, 끝 연월일), 교재 명, 강의실, 
강의 진행 여부(강의 예정, 강의 중, 강의 종료)를 담아냈다. 뷰에 담아낸 내용이 출력되기 위해 조인을 하는 과정에서
처음에는 그냥 JOIN을 사용했는데 안에 데이터가 출력이 되지 않아서 LEFT, RIGHR OUTER JOIN을 사용하여 문제를 해결하였다.

요구분석서를 바탕으로 ER 다이어그램을 구성하는데 고민하는 시간을 너무 많이 투자하다보니 쿼리문을 구성하는데 시간이 촉박했다.
쿼리문을 구성할때 생각보다 오류가 많이 나왔고 이 오류를 잡기위해 조원끼리 토의를 통해 해결을 해야 하는데
각자 맡은 부분을 해결하려다보니 의견 공유를 많이 하진 못해 아쉬웠다. 그래도 중간중간 서로 얼마나 했는지 물어가며 같이 해결하려고
노력했고 자바때 팀프로젝트에 이어 이번에도 소통의 중요성을 느낄 수 있었다. 나의 의견을 남들 앞에서 말하기 어려워 했었는데 계속해서
팀프로젝트를 해보며 내 생각을 정리해서 말하고 해결하기 위해 노력하는 모습이 보였고 이를 통해 내가 한층 성장하는 기분이 들었다.  



엄소연 :
 
성적 처리 시스템 구현 요구분석서 파악하는데 오랜 시간이 걸렸고 까다로워보였다.
요구 분석서를 보고 도대체 어떤 테이블과 컬럼이 필요한지 몰라서
감이 안 잡혔지만 ERD Cloud 를 통해 작성해 보면서 점점 감이 잡혔다.

 하지만 테이블간의 식별 관계, 비식별 관계를 파악해서 연결짓기는 쉽지 않아서 검색을 많이 했다.
정규화 전엔 테이블의 수가 약 6개 정도였지만 정규화를 수행하고 테이블의 갯수는 13개까지 늘어난게 새삼 신기하였다.
13개의 테이블사이의 관계가 ERD를 직접 작성 함으로써 파악이되었다.
모르는게 있으면 혼자 해결하려고 노력하고, 혼자 못하면 팀원들한테 바로바로 물어보며 도움을 받을 수 있어서 좋았다. 
모른채로 넘어하고 아는척 하며 넘어가는것보단 내가 질문함으로 인해서 질문을 회의 주제로 삼아 중요한 내용을 팀원들도 
확실히 알게된다면 그보다 좋은것은 없기 때문이다.
하지만 너무 쓸데없는 질문이나 효율성이 떨어지는 질문을 시간을 위해서 삼가야한다고 느꼈다.

 다른 조에 비해서 가장 늦게 ERD 확인을 받았는데 제일 늦었지만 완성도가 높다는 칭찬을 받아서 사기가 올라갔다.
배우는 단계라 속도보다 알고 넘어가는것이 더 좋다는 걸 느꼈지만 실력이 뒤쳐질까봐 걱정되는 것도 사실이었다.
ERD작성은 굉장히 중요한 작업이라 ERD를 작성을 하고나면 
퀴리문은 수업시간에 그냥 배운대로 적용하면 쉬울것이라고 예상했다. 
하지만 요구분석서 대로 알맞은 결과 도출하는것이 너무 어려웠고 
결과를 도출하기 위해 함수, 프로시저, 뷰 를 아주 세세하게 쪼개는 것이 맞는지
효율성있게 프로시저 안에 넣기도하고 프로시저의 기능을 좋게 합쳐야하는지 파악하기가 어려웠다.
자바보다 쉽다고 생각했지만 생각보다 요구분석서 대로 결과를 내기란 자유자재로 되지않았다.

이번에 맡게된 부분은 성적 테이블이다.
성적 테이블은 교수자가 강의한 학생들의 성적이 관리자, 교수자, 학생이 조회를 각각 달리 할 수 있어야 하는 테이블이다.
프로시저를 만들고 테스트를 하는데 팀원들과 상의를 해도 프로시저에 틀린 부분이 없는데 프로시저가 작동을 안했다.
결국 팀원 중 한 명이 프로시저 테스트를 성공해줘서 프로시저 자체에 이상이 없는걸 파악하고 다른 문제를 찾았다.
이건 나의 바보같은 실수였는데 공용 계정에서 프로시저를 생성하고 테스트는 다른(개인)계정에서 했기 때문이었다.
이 실수로 미루어보았을때 오라클은 그동안 생소했던 계정이 존재하고 계정을 잘 파악해야 한다는걸 느꼈다.
테스트 대신 해 준 팀원이 아니었으면 문제를 해결하는데 더욱 오랜시간이 걸렸을 것 같고
이 실수로 인해서 테스트의 중요성을 절실히 깨달았다.
프로시저가 컴파일 된다 하더라도 테스트에서 통과하지 못하면 
제자리로 돌아와 성공 할 때까지 수정을 반복해야 하기 때문이다.

 요구분석서 파악이 어려운만큼 팀원들과 회의하면서 팀원들의 의견과 생각이 도움 된 것이 많았다.
관계가 부모-자식인 경우가 다수이기 때문에 프로젝트 초기 ERD 작성할 때는 누가 부모냐 자식이냐의 회의를 많이 하다가 
프로젝트 막바지에서는 결과 도출하느라 바빴다.
ERD 작성이 완료됐기 때문에 결과만 내면되는데 세세한 요구는 아직까지는 감당이 되지않았다.
하지만 프로젝트를 할 때 마다 배운걸 응용 해보면서 많이 배우고 팀원들의 소중함을 알기 때문에 같이 움직이게 되어서 한편으로는 좋았다.
이론은 쉽고 실습은 너무 어렵다는것을 또 다시 느꼈다.



장현성 : 

팀원들과 ERD를 작성하면서 각 테이블 명과 컬럼명을 통일 시키고 각 테이블간의 관계와 
전체 구조를 한눈에 파악할 수 있어 기존보다 수정사항이 적게 발생했다고 생각한다.
처음에 성적처리 시스템에 대한 요구분석서를 파악하면서 필요한 테이블과 컬럼들에 대해 고민하고 ERD를 작성해 나갔다.
각 테이블 간의 연결관계에서의 식별관계와 비식별관계와의 차이를 잘 몰라 난감했고 그 차이를 알아내는 데만
생각보다 많은 시간을 소비하게 되었다. ERD를 작성하면서 기존에 갖고있는 데이터로 구할 수 있는 것들은 따로 
컬럼화를 하지 않았고 과정, 과목, 중도탈락사유 등 정규화를 통해 테이블을 따로 분리해 두었다. 
진행 도중 하필 코로나 확진되고 나서 팀원들과의 ERD 작성을 같이 진행하지 못하게 되었는데 팀원들이 
만든 ERD가 첫번째 컨펌으로 받게 되면서 개설과목 테이블에서 배점테이블을 따로 분리하게 되면 1대1 관계가 되서 
그 부분은 다시 합치라는 조언을 받고 다시 수정과 여러 컨펌을 통해 ERD 작성을 마치게 되었다.
각 팀원들이 기능 하나씩 맡아 진행하게 되었는데 학생을 맡게 되어 학생의 INSERT, UPDATE, DELETE 
프로시져와 학생 관리 기능 구현 뷰를 작성했다. 학생 DELETE 프로시저를 만들고나서 기존 등록된 학생에 대해 삭제가 
이루어졌지만 이미 과정을 수강신청한 상태의 학생을 DELETE할 때, 삭제가 이루어지지 않았다. 이 문제는
참조하는 수강신청 테이블에서의 학생이 먼저 삭제되어야 하기 때문에 수강신청 테이블의 학생이 먼저 삭제되는 
트리거를 생성해야 했다. 구현 뷰 에서는 INNER JOIN을 통해 양쪽 테이블에 같은 조건의 값이 존재해야 데이터를 가져올 수
있게 만들었고 학생의 중도탈락 여부를 확인 할 수 있어야하는데 중도탈락이 아닌 학생의 경우
데이터가 NULL이기 때문에 이부분은 OUTER JOIN 통해 중도탈락이 아닌 학생들도 출력이 되게 만들었다. 
프로젝트를 진행하면서 처음에는 아무래도 비대면이다 보니깐 대면일 때 보다 의사소통이 적어 진행이 안되는 문제가 발생했다.
그러나 점차 의사소통이 활발하게 진행되면서 막히는 부분에 있어서 같이 의논하면서 문제를 해결해 나가다 보니 
프로젝트의 진행속도가 붙기 시작했다. 팀 프로젝트에 있어 의사소통의 중요성에 대해서 다시 한번 인지하게 되었다.




조현하 :

이번 SQL 오라클 프로젝트는 자바 프로젝트 보다 접근 하기가 힘들었다. 그 이유는 자바에서도 어려웠던 큰 그림 그리기를 초반 부터 해야하기 때문이다. 
이 때문에 팀원들과도 ERD 작성을 많이 어려워 했는데, ERD CLOUD 프로그램 덕분에 조금 더 수월하게 작성할 수 있었다. 
모든 부분이 얽히고 한 테이블의 기본키가 다른 테이블의 참조키가 되는 상황이여서 나눠서 생각하기 까다로웠고 이러한 이유로 분담해서 하기보다 
같이 줌으로 소통해야하는데 아무래도 비대면으로 하다보니 소통이 부족해서 초반에 진도가 나가지 않았다. 
하지만 팀장님이 워낙 책임감을 갖고 임해주셔서 믿고 따라갈 수 있었다. 컨펌을 받기 전에 많은 부분을 내부적으로 얘기했기 때문에 컨펌은 비교적 수월했지만 그럼에도 지적받은 부분은 1:1 관계인 배점과 개설 과목 테이블에 관한 거였다. 이 부분에서 강사님은 두 테이블을 합치라는 얘기를 해주셨는데 나는 이해가 안가서 팀장님을 통해 질문을 드렸다. '배점은 과목이 개설되는 과정이 아닌 성적을 입력하기 위해 교수가 지정하는 데이터라 따로 테이블로 빼서 교수는 배점만 관리하도록 권한을 주기위해 1:1 관계를 갖게 하였다' 였는데 우리가 만드는 단계에서는 합치도록  조언을 주셔서 그렇게 진행하였다. 아무래도 이번 성적관리 시스템은 요구 분석서에 맞춘 시스템이기 때문에 요구 분석서에 나와있는대로 기능을 구현하기 위해 정말 많이 읽어 보았는데 그럼에도 이해가 안가는 부분이 많아 팀원들끼리 많은 대화를 하였다. 개설 과정과 개설 과목의 관계도 그 중에 하나였는데 생각을 깊게 할 수록 복잡해졌고 결론은 단순하게 요구 분석서에 나와있는 대로 과정은 여러 개의 과목으로 이루어져 있다. 이렇게 정리가 되었다.
ERD 모델링은 컨펌을 받았고 그 후 한명씩 성적 교수자 학생 과목 과정 을 맡아 진행하기로 하였다. 
사다리타기로 과정을 걸려서 처음에는 요구 분석서에 기능적으로는 많지 않아서 얕잡아 보았는데 결코 쉽지 않았다. 
일단 과정에는 과정, 개설 과정, 강의실이 있어서 부모 테이블인 과정에 먼저 INSERT UPDATE DELETE 프로시저를 작성하였고 이를 통해 
개설 과정에 한번더 INSERT UPDATE DELETE 프로시저를 만들어 줘야 했다. 
요구분석에는 개설 과정 코드 없이 과정명과 시작일 종료일 강의실로만 입력을 하라고 나와있지만 해보다 보니 부모격인 과정에 INSERT 할때는 코드를 임의대로 넣어줘야 했다.
 이를 토대로 개설 과정에는 코드가 자동 부여 되도록 만들었는데 이 부분이 좀 납득이 되지 않았다. 
시퀀스와 SUBSTR을 이용하여 자동으로 부여가 되긴 하지만 그전에 이미 임의로 넣기 때문이다. 
또한 강의실 같은 경우도 임의로 INSERT를 해야지만 개설 과정에 강의실 코드를 넣을 수 있기 때문에 테스트할 때 이 부분이 좀 억지 스럽게 느껴졌다. 
하지만 이는 INSERT 프로시저를 만들어도 마찬가지였기 때문에 그대로 진행하도록 하였다. 
또한 헷갈렸던 부분이 UPDATE 부분인데 UPDATE를 특정 부분만 고칠 수 있게 구현이 되지 않았다. 
이 부분이 어려워서 팀원들과 많은 대화를 나눴지만 결국 해결하지 못했는데 1차원적으로 UPDATE 프로시저를 매우 많이 만드는 방법 밖에는 없는 것 같아 
이 부분은 추후에라도 강사님이나 다른 조원들에게 자문을 구하고 싶다. 
DELETE 에서  어려웠던 부분은 아무래도 TRIGGER의 사용 여부 였는데 일단은 부모 테이블인 과정을 삭제하려면 
개설 과정을 삭제해야하고 개설 과정을 삭제하기 위해서는 수강신청과 개설 과목을 삭제해야 하는데 이 수강신청과 개설 과목도 
다른 테이블과 많이 엮어 있어서 삭제가 연쇄적으로 되는지가 어려웠다. 
하지만 요구분석에서는 데이터가 있을 경우는 삭제가 불가능 하다고 나와 있었기 때문에 삭제가 불가능한 경우 안되게끔 해줬다.  
마지막으로 과정명을 출력할 때에 VIEW를 이용해서 조회될 수 있게 만들었는데 개설 과목이 NULL일 때는 아예 조회가 안되었다. 
하지만 요구 분석서에는 모든 과정을 조회할 수 있어야 한다 하였기 때문에 NULL인 항목도 조회될 수 있게  
JOIN 을 INNER JOIN 하던것을 LEFT OUTER JOIN 또는 RIGHT OUTER JOIN을 통하여 개설 과목이 NULL이여도 조회가 가능하게끔 만들어줬다. 
이 기준을 정할 때 매우 헷갈렸는데 더 많은 데이터를 가진 자식 테이블이 기준이 되어야 하는것을 기본으로 삼아 정해주었다. 
처음 시작할 때만 해도 정보 처리 기사 자격증 공부를 할 때 이해를 못한 부분이였기에 많은 두려움이 있었다. 
하지만 정규화부터 차근차근 이해하가며 공부해 보니 그리고 쿼리문도 직접 작성하고 이번 세미 프로젝트를 통해 
테이블도 직접 짜보고 데이터도 넣어 테스트를 해보는 과정을 통하여 훨씬 데이터베이스에 대한 이해도가 높아졌다. 
또한 자바를 이용하여 자판기를 구현할 때 보다 더 많은 부분은 관리할 수 있고 이용할 수있게 되어 신기했고 
기회가 된다면 자판기도 오라클을 이용하여 구현해보고 싶다. 
이제서야 비로소 강사님이 말씀하신 데이터베이스에 대한 갈증을 이해할 수 있게 되었다. 
앞으로 더욱 많은 것을 배우게 되면 현재 겪은 어려움을 쉽게 해결할 수 있을 것 같아 기대된다. 
마지막으로 어쩌다 보니 같은 팀으로 두 번 세미 프로젝트를 하게되었는데 모두 열심히 해주셔서 감사하고 
열심히 하시는 모습을 보며 동기도 얻고 반성도 하게되었다. 의견이 다를 때도 혹은 조금 진행이 늦을 때에도 모두 다 도와주려고 해주셔서 감사하다. 






