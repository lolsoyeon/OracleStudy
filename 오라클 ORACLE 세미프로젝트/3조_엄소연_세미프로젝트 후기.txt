엄소연 :
 
성적 처리 시스템 구현 요구분석서 파악하는데 오랜 시간이 걸렸고 까다로워보였다.
요구 분석서를 보고 도대체 어떤 테이블과 컬럼이 필요한지 몰라서
감이 안 잡혔지만 ERD Cloud 를 통해 작성해 보면서 점점 감이 잡혔다.

 하지만 테이블간의 식별 관계, 비식별 관계를 파악해서 연결짓기는 쉽지 않아서 검색을 많이 했다.
정규화 전엔 테이블의 수가 약 6개 정도였지만 정규화를 수행하고 테이블의 갯수는 13개까지 늘어난게 새삼 신기하였다.
13개의 테이블사이의 관계가 ERD를 직접 작성 함으로써 파악이되었다.
모르는게 있으면 혼자 해결하려고 노력하고, 혼자 못하면 팀원들한테 바로바로 물어보며 도움을 받을 수 있어서 좋았다. 
모른채로 넘어가고 아는척 하며 넘어가는것보단 내가 질문함으로 인해서 질문을 회의 주제로 삼아 중요한 내용을 팀원들도 
확실히 알게된다면 그보다 좋은것은 없기 때문이다.
하지만 너무 쓸데없는 질문이나 효율성이 떨어지는 질문을 시간을 위해서 삼가야한다고 느꼈다.

 다른 조에 비해서 가장 늦게 ERD 확인을 받았는데 제일 늦었지만 완성도가 높다는 칭찬을 받아서 사기가 올라갔다.
배우는 단계라 속도보다 알고 넘어가는것이 더 좋다는 걸 느꼈지만 실력이 뒤쳐질까봐 걱정되는 것도 사실이었다.
ERD작성은 굉장히 중요한 작업이라 ERD를 작성을 하고나면 
퀴리문은 수업시간에 그냥 배운대로 적용하면 쉬울것이라고 예상했다. 
하지만 요구분석서 대로 알맞은 결과 도출하는것이 너무 어려웠고 
결과를 도출하기 위해 함수, 프로시저, 뷰 를 아주 세세하게 쪼개는 것이 맞는지
효율성있게 프로시저 안에 넣기도하고 프로시저의 기능을 좋게 합쳐야하는지 파악하기가 어려웠다.
자바보다 쉽다고 생각했지만 생각보다 요구분석서 대로 결과를 내기란 자유자재로 되지않았다.

이번에 맡게된 부분은 성적 테이블이다.
성적 테이블은 교수자가 강의한 학생들의 성적이 관리자, 교수자, 학생이 조회를 각각 달리 할 수 있어야 하는 테이블이다.
프로시저를 만들고 테스트를 하는데 팀원들과 상의를 해도 프로시저에 틀린 부분이 없는데 프로시저가 작동을 안했다.
결국 팀원 중 한 명이 프로시저 테스트를 성공해줘서 프로시저 자체에 이상이 없는걸 파악하고 다른 문제를 찾았다.
이건 나의 바보같은 실수였는데 공용 계정에서 프로시저를 생성하고 테스트는 다른(개인)계정에서 했기 때문이었다.
이 실수로 미루어보았을때 오라클은 그동안 생소했던 계정이 존재하고 계정을 잘 파악해야 한다는걸 느꼈다.
테스트 대신 해 준 팀원이 아니었으면 문제를 해결하는데 더욱 오랜시간이 걸렸을 것 같고
이 실수로 인해서 테스트의 중요성을 절실히 깨달았다.
프로시저가 컴파일 된다 하더라도 테스트에서 통과하지 못하면 
제자리로 돌아와 성공 할 때까지 수정을 반복해야 하기 때문이다.

 요구분석서 파악이 어려운만큼 팀원들과 회의하면서 팀원들의 의견과 생각이 도움 된 것이 많았다.
관계가 부모-자식인 경우가 다수이기 때문에 프로젝트 초기 ERD 작성할 때는 누가 부모냐 자식이냐의 회의를 많이 하다가 
프로젝트 막바지에서는 결과 도출하느라 바빴다.
ERD 작성이 완료됐기 때문에 결과만 내면되는데 세세한 요구는 아직까지는 감당이 되지않았다.
하지만 프로젝트를 할 때 마다 배운걸 응용 해보면서 많이 배우고 팀원들의 소중함을 알기 때문에 같이 움직이게 되어서 한편으로는 좋았다.
이론은 쉽고 실습은 너무 어렵다는것을 또 다시 느꼈다.





요약



 다른 조에 비해서 가장 늦게 ERD 확인을 받았는데 제일 늦었지만 
완성도가 높다는 칭찬을 받아서 사기가 올라갔다.
배우는 단계라 속도보다 알고 넘어가는것이 더 좋다는 걸 
느꼈지만 실력이 뒤쳐지는것 같아 걱정되는 것도 사실이었다.
ERD작성은 굉장히 중요한 작업이라 ERD를 작성을 하고나면 
퀴리문은 수업시간에 그냥 배운대로 적용하면 
쉬울것이라고 예상했다. 하지만 요구분석서 대로 
알맞은 결과 도출하는것이 너무 어려웠고 
자바보다 쉽다고 생각했지만 생각보다 요구분석서 
대로 결과를 내기란 자유자재로 되지않았다.

맡은 성적 테이블 프로시저를 만들고 테스트를 하는데 
팀원들과 상의를 해도 프로시저에 틀린 부분이 없는데
프로시저가 작동을 안했다.
결국 팀원 중 한 명이 프로시저 테스트를 성공해줘서 
프로시저 자체에 이상이 없는걸 파악하고 다른 문제를 찾았다.
이건 나의 바보같은 실수였는데 공용 계정에서 프로시저를 
생성하고 테스트는 다른(개인)계정에서 했기 때문이었다.
테스트 대신 해 준 팀원이 아니었으면 문제를 
해결하는데 더욱 오랜시간이 걸렸을 것 같고
이 실수로 인해서 테스트의 중요성을 절실히 깨달았다.
프로시저가 컴파일 된다 하더라도 테스트에서 
통과하지 못하면 제자리로 돌아와 성공 할 때까지 
수정을 반복해야 하기 때문이다.
이론은 쉽고 실습은 너무 어렵다는것을 또 다시 느꼈다.











