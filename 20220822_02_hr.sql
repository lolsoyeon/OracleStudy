SELECT USER
FROM DUAL;
--==>> HR


--○ 세개 이상의 테이블 조인(JOIN)

-- 형식 1. (SQL 1922 CODE)

SELECT 테이블명1.컬럼명, 테이블명2.컬럼명, 테이블명3.컬럼명
FROM 테이블명1, 테이블명2, 테이블명3
WHERE 테이블명1.컬럼명1 = 테이블명2.컬럼명1
  AND 테이블명2.컬럼명2 = 테이블명3.컬럼명2;



-- 형식 2. (SQL 1999 CODE)

SELECT 테이블명1.컬럼명, 테이블명2.컬럼명, 테이블명3.컬럼명
FROM 테이블명1 JOIN  테이블명2 
ON 테이블명1.컬럼명1 = 테이블명2.컬럼명1
        JOIN 테이블명3
        ON 테이블명2.컬럼명2 = 테이블명3.컬럼명2;



--○ HR 계정 소유의 테이블 또는 뷰 목록 조회

SELECT *
FROM TAB;
/*
COUNTRIES	        TABLE	
DEPARTMENTS	        TABLE	
EMPLOYEES	        TABLE	
EMP_DETAILS_VIEW	    VIEW	
JOBS            	    TABLE	
JOB_HISTORY	        TABLE	
LOCATIONS	        TABLE	
REGIONS	            TABLE	
*/


--○ HR.JOBS, HR.EMPLOYEES, HR.DEPARTMENTS 테이블을 대상으로
-- 직원들의 테이터를
-- FIRST_NAME, LAST_NAME, JOB_TITLE, DEPARTMENT_NAME 항목으로 조회한다. DO
-- E            E           J           D

/*
DEPARTMENT_ID
--  E D

JOB_ID 
-- J E

MANAGER_ID
-- D E 
*/

SELECT *
FROM JOBS;

SELECT *
FROM EMPLOYEES;

SELECT *
FROM DEPARTMENTS;


--  FIRST_NAME, LAST_NAME, JOB_TITLE, DEPARTMENT_NAME
SELECT JOBS.컬럼명, EMPLOYEES.컬럼명, DEPARTMENTS.컬럼명
FROM JOBS, EMPLOYEES, DEPARTMENTS
WHERE JOBS.컬럼명1 = EMPLOYEES.컬럼명1
  AND EMPLOYEES.컬럼명2 = DEPARTMENTS.컬럼명2;



SELECT JOBS.FIRST_NAME, EMPLOYEES.LAST_NAME, DEPARTMENTS.DEPARTMENT_NAME
FROM JOBS, EMPLOYEES, DEPARTMENTS
WHERE JOBS.FIRST_NAME = EMPLOYEES.LAST_NAME
  AND EMPLOYEES.JOB_TITLE = DEPARTMENTS.DEPARTMENT_NAME;


-- 하는 과정
SELECT HR.JOBS.JOB_TITLE, HR.EMPLOYEES.FIRST_NAME, HR.EMPLOYEES.LAST_NAME, HR.DEPARTMENTS.DEPARTMENT_NAME
FROM HR.JOBS JOIN  HR.EMPLOYEES
ON HR.JOBS.JOB_TITLE = HR.EMPLOYEES.FIRST_NAME
        JOIN HR.DEPARTMENTS
        ON HR.EMPLOYEES.FIRST_NAME = HR.DEPARTMENTS.DEPARTMENT_NAME;





-- 내가 한 것 최종 1              2 같음
SELECT HR.EMPLOYEES.FIRST_NAME, HR.EMPLOYEES.LAST_NAME, HR.JOBS.JOB_TITLE, HR.DEPARTMENTS.DEPARTMENT_NAME
FROM HR.JOBS JOIN  HR.EMPLOYEES
ON HR.JOBS.JOB_ID = HR.EMPLOYEES.JOB_ID 
        JOIN HR.DEPARTMENTS
        ON HR.EMPLOYEES.DEPARTMENT_ID = HR.DEPARTMENTS.DEPARTMENT_ID;



-- 내가 한 것 최종 2         1 같음
SELECT HR.EMPLOYEES.FIRST_NAME, HR.EMPLOYEES.LAST_NAME,HR.JOBS.JOB_TITLE, HR.DEPARTMENTS.DEPARTMENT_NAME 
FROM HR.JOBS, HR.EMPLOYEES, HR.DEPARTMENTS
WHERE HR.JOBS.JOB_ID = HR.EMPLOYEES.JOB_ID
  AND HR.EMPLOYEES.DEPARTMENT_ID = HR.DEPARTMENTS.DEPARTMENT_ID;


SELECT HR.EMPLOYEES.FIRST_NAME, HR.EMPLOYEES.LAST_NAME,HR.JOBS.JOB_TITLE, HR.DEPARTMENTS.DEPARTMENT_NAME 
FROM HR.JOBS, HR.EMPLOYEES, HR.DEPARTMENTS
WHERE HR.JOBS.JOB_ID = HR.EMPLOYEES.JOB_ID
  AND HR.EMPLOYEES.MANAGER_ID = HR.DEPARTMENTS.MANAGER_ID;
  ---> D.MANAGER_ID 에 NULL이 많아서 진행 X


-------------T

-- FIRST_NAME, LAST_NAME, JOB_TITLE, DEPARTMENT_NAME 항목으로 조회한다. DO
-- EMPLOYEES   EMPLOYEES   JOBS         DEPARTMENT
SELECT *
FROM JOBS;

SELECT *
FROM EMPLOYEES;
-- JIB_ID       -- 관계 컬럼

SELECT *
FROM DEPARTMENTS;
-- DEPARTMENT_ID -- 관계 컬럼






SELECT 테이블명1.컬럼명, 테이블명2.컬럼명, 테이블명3.컬럼명
FROM 테이블명1 JOIN  테이블명2 
ON 테이블명1.컬럼명1 = 테이블명2.컬럼명1
        JOIN 테이블명3
        ON 테이블명2.컬럼명2 = 테이블명3.컬럼명2;



SELECT JOBS.FIRST_NAME, EMPLOYEES.LAST_NAME, DEPARTMENTS.DEPARTMENT_NAME
FROM EMPLOYEES E JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;




SELECT COUNT(*)
FROM EMPLOYEES E JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;
--==>> 106


SELECT COUNT(*)
FROM EMPLOYEES;
--==>> 107


SELECT COUNT(*)
FROM EMPLOYEES E LEFT JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;
--==>> 107



SELECT COUNT(*)
FROM EMPLOYEES E LEFT JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
        JOIN JOBS J
        ON E.JOB_ID = J.JOB_ID;
--==>> 107


SELECT E.FIRST_NAME, E.LAST_NAME, D.DEPARTMENT_NAME,J.JOB_TITLE
FROM EMPLOYEES E LEFT JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
        JOIN JOBS J
        ON E.JOB_ID = J.JOB_ID;


--○ EMPLOYEES, DEPARTMENTS, JOBS, LOCATIONS, COUNTRIES, REGIONS 테이블을 대상으로
-- 직원들의 데이터를 다음과 같이 조회한다.
-- FIRST_NAME, LAST_NAME, JOB_TITLE, DEPARTMENT_NAME, CITY
-- E          E          J             D     
--, CONTRY_NAME, REGION_NAME
--    C          R


/*

*/
SELECT *
FROM JOBS;
-- JOB_ID

SELECT *
FROM EMPLOYEES;
-- JOB_ID       -- 관계 컬럼

SELECT *
FROM DEPARTMENTS;
-- DEPARTMENT_ID -- 관계 컬럼
-- LOCATION_ID

SELECT *
FROM LOCATIONS;
--CITY 
--COUNTRY_ID
--LOCATION_ID

SELECT *
FROM COUNTRIES;
--COUNTRY_ID
--REGION_ID

SELECT *
FROM REGIONS;
--REGION_ID




SELECT FIRST_NAME, LAST_NAME, JOB_TITLE, DEPARTMENT_NAME, CITY, CONTRY_NAME, REGION_NAME
FROM EMPLOYEES E JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
        JOIN JOBS J
        ON E.JOB_ID = J.JOB_ID;






SELECT FIRST_NAME, LAST_NAME, JOB_TITLE, DEPARTMENT_NAME, CITY, CONTRY_NAME, REGION_NAME
FROM LOCATIONS L JOIN COUNTRIES C
ON L.COUNTRY_ID = C.COUNTRY_ID
        JOIN REGIONS R
        ON C.REGION_ID = R.REGION_ID;





SELECT COUNT(*)
FROM LOCATIONS L JOIN COUNTRIES C
ON L.COUNTRY_ID = C.COUNTRY_ID
        JOIN REGIONS R
        ON C.REGION_ID = R.REGION_ID;
--==>> 23



SELECT *
FROM LOCATIONS L JOIN COUNTRIES C
ON L.COUNTRY_ID = C.COUNTRY_ID
        JOIN REGIONS R
        ON C.REGION_ID = R.REGION_ID;




SELECT *
FROM LOCATIONS L JOIN COUNTRIES C
ON L.COUNTRY_ID = C.COUNTRY_ID
        JOIN (EMPLOYEES E LEFT JOIN DEPARTMENTS D
                ON E.DEPARTMENT_ID = D.DEPARTMENT_ID)
        ON C.REGION_ID = R.REGION_ID;
            

FROM
(
    SELECT COUNT(*)
    FROM LOCATIONS L JOIN COUNTRIES C
    ON L.COUNTRY_ID = C.COUNTRY_ID
            JOIN REGIONS R
            ON C.REGION_ID = R.REGION_ID
) W
JOIN 



SELECT E.FIRST_NAME, E.LAST_NAME, J.JOB_TITLE, D.DEPARTMENT_NAME
     , L.CITY, C.COUNTRY_NAME, R.REGION_NAME
FROM EMPLOYEES E LEFT JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
   JOIN JOBS J
   ON E.JOB_ID = J.JOB_ID
      JOIN LOCATIONS L
      ON L.LOCATION_ID = D.LOCATION_ID
         JOIN COUNTRIES C
         ON C.COUNTRY_ID = L.COUNTRY_ID
            JOIN REGIONS R
            ON R.REGION_ID = C.REGION_ID;



SELECT E.FIRST_NAME, E.LAST_NAME, J.JOB_TITLE, D.DEPARTMENT_NAME
     , L.CITY, C.COUNTRY_NAME, R.REGION_NAME
FROM EMPLOYEES E LEFT JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
    LEFT JOIN JOBS J
    ON E.JOB_ID = J.JOB_ID
        LEFT JOIN LOCATIONS L
        ON L.LOCATION_ID = D.LOCATION_ID
            LEFT JOIN COUNTRIES C
            ON C.COUNTRY_ID = L.COUNTRY_ID
                LEFT JOIN REGIONS R
                ON R.REGION_ID = C.REGION_ID;
















